import sys
import subprocess
import time
import torch

def makeCharacterDictionary(targetFile, unk_threshhold = 0):
    s = ""
    with open(targetFile) as f:
        s = f.read()

    if s == "":
        print(f'makeCharacterDictionary could not read the file {targetFile}.')
        return {}

    characterDictionary = {}
    for c in s:
        if c in characterDictionary: characterDictionary[c] += 1
        else: characterDictionary[c] = 1

    charToIndexDictionary, index = {}, 1 # start indexing from 1

    for c,val in characterDictionary.items():
        if val <= unk_threshhold:
            charToIndexDictionary[c] = 0
        else:
            charToIndexDictionary[c] = index
            index += 1

    return charToIndexDictionary

def makeCharVector(sentence,charToIndexDictionary):
    finalVector = []
    for c in sentence:
        if c not in charToIndexDictionary:
            finalVector.append(0)
        else:
            finalVector.append(charToIndexDictionary[c])

    return finalVector

class FastTextClassifier(torch.nn.Module):  # inherits from nn.Module!

    def __init__(self, vocab_size: int, hidden_size: int):
        super(FastTextClassifier, self).__init__()
        self.embedding = torch.nn.Embedding(vocab_size, hidden_size)
        self.linear = torch.nn.Linear(hidden_size, 2)

    def forward(self, charArray):
        charVector = tensor([charArray])

        mean_size = charVector.size()
        embedded_sentence = self.embedding(charVector)
        hidden = torch.mean(embedded_sentence,1,False)
        features = self.linear(hidden)

        return F.log_softmax(features, dim=1)

def trainChar2VecModel():
    pass

d = makeCharacterDictionary('w2v/pythontraining_withoutString_X')
v = makeCharVector('test_connect_to_region ( self )',d)
print(v)
pass