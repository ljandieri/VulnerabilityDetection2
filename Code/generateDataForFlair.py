import os
import pickle
import sys
import random

mode = 'remote_code_execution'

# get the vulnerability from the command line argument
if (len(sys.argv) > 1):
    mode = sys.argv[1]

thisDir = os.getcwd()
processedDataDir = thisDir + '\\dataProcessed'
processedDataName = mode + '_processed'
processedDataFullPath = processedDataDir + '\\' + processedDataName

data = None
if os.path.exists(processedDataFullPath):
    with open(processedDataFullPath, 'rb') as f:
        data = pickle.load(f)
else:
    print(f'tried opening data at {processedDataFullPath}\nFile does not exist.')
    sys.exit(1)

pass

flairDataDir = thisDir + '\\flair\\processedData\\' + mode + '\\'
if not os.path.exists(flairDataDir):
    os.mkdir(flairDataDir)

flairDataName = mode+'_processed_flair'
flairDataFullPath = flairDataDir + flairDataName
flairDataTrainFullPath = flairDataDir + flairDataName + '_train'
flairDataValidationFullPath = flairDataDir + flairDataName + '_validation'
flairDataTestFullPath = flairDataDir + flairDataName + '_test'

flairDataFile = None

## reformat data to fasttext format (accepted by flair)
flair_format = '__label__{} {}\n'
reformattedData = []

keys = []

#randomize the sample and split into train, validate and final test set
for i in range(len(data)):
  keys.append(i)
random.shuffle(keys)

cutoff = round(0.7 * len(keys)) # 70% for the training set
cutoff2 = round(0.85 * len(keys)) # 15% for the validation set and 15% for the final test set

trainKeys = keys[:cutoff]
validationKeys = keys[cutoff:cutoff2]
testKeys = keys[cutoff2:]

print("cutoff " + str(cutoff))
print("cutoff2 " + str(cutoff2))

with open(flairDataFullPath,'w',encoding='utf-8') as f:
    for block in data:
        code = block[0].replace('\n',' ').strip() # removing newlines from code and prefix/suffix spaces
        label = 1 - block[1] # flipping 0 to clean and 1 to vulnerable
        thisLine = flair_format.format(label,code)
        f.write(thisLine)

with open(flairDataTrainFullPath, 'w', encoding='utf-8') as f:
    for key in trainKeys:
        block = data[key]
        code = block[0].replace('\n', ' ').strip()  # removing newlines from code and prefix/suffix spaces
        label = 1 - block[1] # flipping 0 to clean and 1 to vulnerable
        thisLine = flair_format.format(label,code)
        f.write(thisLine)

with open(flairDataValidationFullPath, 'w', encoding='utf-8') as f:
    for key in validationKeys:
        block = data[key]
        code = block[0].replace('\n', ' ').strip()  # removing newlines from code and prefix/suffix spaces
        label = 1 - block[1] # flipping 0 to clean and 1 to vulnerable
        thisLine = flair_format.format(label,code)
        f.write(thisLine)

with open(flairDataTestFullPath, 'w', encoding='utf-8') as f:
    for key in testKeys:
        block = data[key]
        code = block[0].replace('\n', ' ').strip()  # removing newlines from code and prefix/suffix spaces
        label = 1 - block[1] # flipping 0 to clean and 1 to vulnerable
        thisLine = flair_format.format(label,code)
        f.write(thisLine)
