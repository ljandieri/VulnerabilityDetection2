from pathlib import Path
import os

from flair.data import Corpus
from flair.datasets import ClassificationCorpus
from flair.embeddings import TransformerDocumentEmbeddings
from flair.models import TextClassifier
from flair.trainers import ModelTrainer

if __name__ == '__main__':
    ## for gpu
    os.environ['TF_GPU_ALLOCATOR'] = 'cuda_malloc_async'

    mode = 'xsrf'

    label_type = 'vulnerability'
    thisDir = os.getcwd()
    modeDataDir = thisDir + '\\flair\\processedData\\' + mode + '\\'
    trainFileName = mode + '_processed_flair_train'
    validationFileName = mode + '_processed_flair_validation'
    testFileName = mode + '_processed_flair_test'

    ## training parameters
    lr = 5.0e-5
    mBatchSize = 32
    epochs = 3
    modelName = f'Flair_transformer_model_lr{lr}_mbtcsz{mBatchSize}_eps{epochs}_{mode}'

    # load corpus containing training, test and dev data
    corpus: Corpus = ClassificationCorpus(modeDataDir,
                                          test_file=testFileName,
                                          dev_file=validationFileName,
                                          train_file=trainFileName,
                                          label_type=label_type,
                                          )

    label_dict = corpus.make_label_dictionary(label_type=label_type)

    """ LSTM 
    word_embeddings = [WordEmbeddings('glove'),
                       FlairEmbeddings('news-forward-fast'),
                       FlairEmbeddings('news-backward-fast')]
    
    document_embeddings = DocumentLSTMEmbeddings(word_embeddings, hidden_size=512, reproject_words=True, reproject_words_dimension=256)
    classifier = TextClassifier(document_embeddings, label_dictionary=corpus.make_label_dictionary(), multi_label=False)
    trainer = ModelTrainer(classifier, corpus)
    trainer.train('./', max_epochs=10)
    """

    document_embeddings = TransformerDocumentEmbeddings('distilbert-base-uncased', fine_tune=True)

    # 5. create the text classifier
    classifier = TextClassifier(document_embeddings, label_dictionary=label_dict, label_type=label_type)

    # 6. initialize trainer
    trainer = ModelTrainer(classifier, corpus)

    modeModelDir = thisDir + '\\flair\\models\\' + mode + '\\'
    if not os.path.exists(modeModelDir):
        os.mkdir(modeModelDir)
    modeModelPath = modeModelDir + modelName

    # 7. run training with fine-tuning
    trainer.fine_tune(modeModelPath,
                      learning_rate=lr,
                      mini_batch_size=mBatchSize,
                      max_epochs=epochs,
                      )