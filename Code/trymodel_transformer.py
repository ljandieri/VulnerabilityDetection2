import myutils
from datetime import datetime
import sys
import numpy as np
import os
import pickle
from keras.models import load_model
from gensim.models import Word2Vec, KeyedVectors
from keras.preprocessing import sequence
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
import tensorflow as tf
import numpy
import transformerBlockModel
from transformerBlockModel import TokenAndPositionEmbedding
from transformerBlockModel import TransformerBlock

import keras

def printAndLog(logString,filename):
  print(logString)
  filename.write(logString + '\n')

#trying to activate GPU
tf.config.experimental.list_physical_devices('GPU')

#default mode / type of vulnerability
# command_injection / open_redirect / path_disclosure / remote_code_execution / sql / xsrf / xss
mode = "xss"

#get the vulnerability from the command line argument
if (len(sys.argv) > 1):
  mode = sys.argv[1]

#model = load_model('model/LSTM_model_'+mode+'.h5',custom_objects={'f1_loss': myutils.f1_loss, 'f1':myutils.f1})
custom_objects = {"TokenAndPositionEmbedding": TokenAndPositionEmbedding, "TransformerBlock": TransformerBlock,'f1_loss': myutils.f1_loss, 'f1':myutils.f1}
"""
with keras.utils.custom_object_scope(custom_objects):
    new_model = keras.Model.from_config(config)
"""


modelPath = 'transformers/transformerModels/' + mode + '/Transformer_model_filtertest_edim32_numhead2_ffsz32_droput0.1_outsz1_opt_adam_btsz1024_eps100_tokvocsize30000_mxl40_xss.h5'
#modelPath = 'transformers/transformerModels/' + mode + '/Transformer_model_edim32_numhead2_ffsz32_droput0.1_outsz1_opt_adam_btsz1024_eps100_tokvocsize30000_mxl50_xsrf.h5'
model = tf.keras.models.load_model(modelPath, custom_objects=custom_objects)

with open('transformers/transformerModels/' + mode + '/_dataset_finaltest_X', 'rb') as fp:
  FinaltestX = pickle.load(fp)
with open('transformers/transformerModels/' + mode + '/_dataset_finaltest_Y', 'rb') as fp:
  FinaltestY = pickle.load(fp)

now = datetime.now() # current date and time
nowformat = now.strftime("%H:%M")

#Prepare the data for the LSTM model

X_finaltest =  numpy.array(FinaltestX,dtype=object)
y_finaltest =  numpy.array(FinaltestY)

now = datetime.now() # current date and time
nowformat = now.strftime("%H:%M")
f= open(mode + 'Res.txt','w')
printAndLog(str(len(X_finaltest)) + " samples in the final test set.",f)
  
  
csum = 0
for y in y_finaltest:
  csum = csum+y

printAndLog("percentage of vulnerable samples: "  + str(int((csum / len(X_finaltest)) * 10000)/100) + "%",f)
printAndLog("absolute amount of vulnerable samples in test set: " + str(csum),f)

#padding sequences on the same length
max_length = len(X_finaltest[0])
X_finaltest = sequence.pad_sequences(X_finaltest, maxlen=max_length, padding='post')


yhat_classes = (model.predict(X_finaltest) > 0.5).astype("int32")
#yhat_classes = model.predict(X_finaltest,verbose=0)
#yhat_classes = np.argmax(model.predict(X_finaltest,verbose=0))
#yhat_classes = model.predict_classes(X_finaltest, verbose=0)

accuracy = accuracy_score(y_finaltest, yhat_classes)
precision = precision_score(y_finaltest, yhat_classes)
recall = recall_score(y_finaltest, yhat_classes)
F1Score = f1_score(y_finaltest, yhat_classes)


#f= open(mode + '_stats.txt','w')
printAndLog("Accuracy: " + str(accuracy),f)
#f.write("Accuracy: " + str(accuracy))
printAndLog("Precision: " + str(precision), f)
#f.write("Precision: " + str(precision))
printAndLog("Recall: " + str(recall), f)
#f.write("Recall: " + str(recall))
printAndLog('F1 score: %f' % F1Score, f)
#f.write('F1 score: %F' % F1Score)
printAndLog("\n",f)
f.close()




