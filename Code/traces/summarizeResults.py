import os
from statistics import mode
from sys import prefix
import pickle
from pyparsing import line

thisDir = os.getcwd()
traceDir = thisDir

modeDirs = [el for el in os.listdir(traceDir) if os.path.isdir(traceDir + '\\' + el)]
modeDirPaths = [traceDir + '\\' + el + '\\' for el in os.listdir(traceDir) if os.path.isdir(traceDir + '/' + el)]

#d = {el:{'path':traceDir + '\\' + el + '\\'} for el in modeDirs}
d = {el:{'path':traceDir + '\\' + el + '\\'} for el in modeDirs}
decimalPlaces = 5

for key,val in d.items():
    thisPath = val['path']
    filesInPath = os.listdir(thisPath)

    for fname in filesInPath:
        thisFilePath = thisPath + fname
        lines = None
        with open(thisFilePath, 'r') as f:
            lines = f.readlines()
        if len(lines) < 14: continue

        measureNames = ['Accuracy','Precision','Recall','F1']

        trainSet = {}
        for i,name in enumerate(measureNames):
            #thisVal = lines[i].split(' ')[-1][:decimalPlaces+2].strip().ljust(decimalPlaces,'0')
            trainSet[name] = lines[i].split(' ')[-1][:decimalPlaces+2].strip().ljust(decimalPlaces+2,'0')


        valSet = {}
        for i,name in enumerate(measureNames):
            #thisVal = lines[i+5].split(' ')[-1][:decimalPlaces+2]
            #if len(thisVal) < 7:
                #thisVal = thisVal.ljust(decimalPlaces+2,'-')
                #print(thisVal)
            valSet[name] = lines[i+5].split(' ')[-1][:decimalPlaces+2].strip().ljust(decimalPlaces+2,'0')


        testSet = {}
        for i,name in enumerate(measureNames):
            testSet[name] = lines[i+10].split(' ')[-1][:decimalPlaces+2].strip().ljust(decimalPlaces+2,'0')

        thisResults = {
            'Training':trainSet,
            'Validation':valSet,
            'Testing':testSet
        }

        d[key][fname] = thisResults

lineLength = 150
elementLength = 25
prefix = '|| '
filledLine = prefix.ljust(lineLength,'=')
filledLine2 = prefix.ljust(lineLength, '-')

setNamePadded = prefix + 'Set Name'.ljust(elementLength)
AccuracyPadded = prefix + 'Accuracy'.ljust(elementLength)
PrecisionPadded = prefix + 'Precision'.ljust(elementLength)
RecallPadded = prefix + 'Recall'.ljust(elementLength)
F1Padded = prefix + 'F1'.ljust(elementLength)
columnTitles = setNamePadded + AccuracyPadded + PrecisionPadded + RecallPadded + F1Padded
columnTitles = columnTitles.ljust(lineLength,' ')

with open('results.txt','w') as f:
    for modeName, val in d.items():
        paddedModeName = prefix + modeName
        paddedModeName = paddedModeName.center(lineLength,'|')

        f.write(paddedModeName + '\n')
        f.write(filledLine  + '\n')
        modeKeys = list(d[modeName].keys())
        modeKeys.remove('path')
        F1_sorted_keys = sorted(modeKeys, key=lambda x: d[modeName][x]['Testing']['F1'], reverse=True)

        for fileName in F1_sorted_keys:
            fileNamePadded = prefix + fileName
            fileNamePadded = fileNamePadded.ljust(lineLength,'=')
            f.write(fileNamePadded + '\n')
            f.write(filledLine + '\n')
            f.write(columnTitles + '\n')
            f.write(filledLine2 + '\n')
            trainSet = d[modeName][fileName]['Training']
            valSet = d[modeName][fileName]['Validation']
            testSet = d[modeName][fileName]['Testing']

            trainSetLine = prefix 
            trainSetLine += 'Training'.ljust(elementLength,' ') + '|| '
            trainSetLine += trainSet['Accuracy'].ljust(elementLength, ' ') + '|| '
            trainSetLine += trainSet['Precision'].ljust(elementLength, ' ') + '|| '
            trainSetLine += trainSet['Recall'].ljust(elementLength, ' ') + '|| '
            trainSetLine += trainSet['F1'].ljust(elementLength, ' ')
            f.write(trainSetLine + '\n')

            valSetLine = prefix 
            valSetLine += 'Validation'.ljust(elementLength,' ') + '|| '
            valSetLine += valSet['Accuracy'].ljust(elementLength, ' ') + '|| '
            valSetLine += valSet['Precision'].ljust(elementLength, ' ') + '|| '
            valSetLine += valSet['Recall'].ljust(elementLength, ' ') + '|| '
            valSetLine += valSet['F1'].ljust(elementLength, ' ') 
            f.write(valSetLine + '\n')

            testSetLine = prefix 
            testSetLine += 'Testing'.ljust(elementLength,' ') + '|| '
            testSetLine += testSet['Accuracy'].ljust(elementLength, ' ') + '|| '
            testSetLine += testSet['Precision'].ljust(elementLength, ' ') + '|| '
            testSetLine += testSet['Recall'].ljust(elementLength, ' ') + '|| '
            testSetLine += testSet['F1'].ljust(elementLength, ' ') 
            f.write(testSetLine + '\n')

            f.write(filledLine + '\n')
            f.write(filledLine + '\n')
        f.write('\n')
        f.write('\n')

pickleOutputFile = 'result.pickled'

with open(pickleOutputFile, 'wb') as fp:
  pickle.dump(d, fp)      

        

        


